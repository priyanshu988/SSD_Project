{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"value\", \"padding\", \"minHeight\", \"placeholder\", \"language\", \"className\", \"style\", \"rehypePlugins\", \"onChange\"];\nimport React, { useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { processHtml, htmlEncode } from './utils';\nimport shortcuts from './shortcuts';\nimport * as styles from './styles';\nimport \"./style/index.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport * from './SelectionText';\nexport default /*#__PURE__*/React.forwardRef((props, ref) => {\n  var {\n      prefixCls = 'w-tc-editor',\n      padding = 10,\n      minHeight = 16,\n      placeholder,\n      language,\n      className,\n      style,\n      rehypePlugins,\n      onChange: _onChange\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var [value, setValue] = useState(props.value || '');\n  useEffect(() => setValue(props.value || ''), [props.value]);\n  var textRef = useRef(null);\n  useImperativeHandle(ref, () => textRef.current);\n  var contentStyle = {\n    paddingTop: padding,\n    paddingRight: padding,\n    paddingBottom: padding,\n    paddingLeft: padding\n  };\n  var htmlStr = useMemo(() => processHtml(\"<pre aria-hidden=true><code \" + (language && value ? \"class=\\\"language-\" + language + \"\\\"\" : '') + \" >\" + htmlEncode(String(value || placeholder || '')) + \"</code><br /></pre>\", rehypePlugins), [value, placeholder, language, rehypePlugins]);\n  var preView = useMemo(() => /*#__PURE__*/_jsx(\"div\", {\n    style: _extends({}, styles.editor, contentStyle, {\n      minHeight\n    }),\n    className: prefixCls + \"-preview \" + (language ? \"language-\" + language : ''),\n    dangerouslySetInnerHTML: {\n      __html: htmlStr\n    }\n  }),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [prefixCls, language, htmlStr]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: _extends({}, styles.container, style),\n    className: prefixCls + \" \" + (className || ''),\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      spellCheck: \"false\",\n      autoCapitalize: \"off\"\n    }, other, {\n      placeholder: placeholder,\n      onKeyDown: evn => {\n        if (!other.onKeyDown || other.onKeyDown(evn) !== false) {\n          shortcuts(evn);\n        }\n      },\n      style: _extends({}, styles.editor, styles.textarea, contentStyle, {\n        minHeight\n      }, placeholder && !value ? {\n        WebkitTextFillColor: 'inherit'\n      } : {}),\n      ref: textRef,\n      onChange: evn => {\n        setValue(evn.target.value);\n        _onChange && _onChange(evn);\n      },\n      className: prefixCls + \"-text\",\n      value: value\n    })), preView]\n  });\n});","map":{"version":3,"mappings":"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","names":["React","useEffect","useImperativeHandle","useMemo","useRef","useState","processHtml","htmlEncode","shortcuts","styles","forwardRef","props","ref","prefixCls","padding","minHeight","placeholder","language","className","style","rehypePlugins","onChange","other","value","setValue","textRef","current","contentStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","htmlStr","String","preView","_jsx","editor","dangerouslySetInnerHTML","__html","_jsxs","container","children","autoComplete","autoCorrect","spellCheck","autoCapitalize","onKeyDown","evn","textarea","WebkitTextFillColor","target"],"sources":["/home/priyanshu/Documents/Projects SSD/SSD_Project/Client/node_modules/@uiw/react-textarea-code-editor/src/index.tsx"],"sourcesContent":["import React, { useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { PluggableList } from 'unified';\nimport { processHtml, htmlEncode } from './utils';\nimport shortcuts from './shortcuts';\nimport * as styles from './styles';\nimport './style/index.less';\n\nexport * from './SelectionText';\n\nexport interface TextareaCodeEditorProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  prefixCls?: string;\n  /**\n   * Set what programming language the code belongs to.\n   */\n  language?: string;\n  /**\n   * Optional padding for code. Default: `10`.\n   */\n  padding?: number;\n  /**\n   * rehypePlugins (Array.<Plugin>, default: `[[rehypePrism, { ignoreMissing: true }]]`)\n   * List of [rehype plugins](https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins) to use. See the next section for examples on how to pass options\n   */\n  rehypePlugins?: PluggableList;\n  /**\n   * The minimum height of the editor. Default: `16`.\n   */\n  minHeight?: number;\n  onKeyDown?: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void | boolean;\n}\n\nexport default React.forwardRef<HTMLTextAreaElement, TextareaCodeEditorProps>((props, ref) => {\n  const {\n    prefixCls = 'w-tc-editor',\n    value: _,\n    padding = 10,\n    minHeight = 16,\n    placeholder,\n    language,\n    className,\n    style,\n    rehypePlugins,\n    onChange,\n    ...other\n  } = props;\n\n  const [value, setValue] = useState(props.value || '');\n  useEffect(\n    () => setValue(props.value || ''),\n    [props.value]\n  );\n  const textRef = useRef<HTMLTextAreaElement>(null);\n  useImperativeHandle<HTMLTextAreaElement, HTMLTextAreaElement>(ref, () => textRef.current!);\n\n  const contentStyle = {\n    paddingTop: padding,\n    paddingRight: padding,\n    paddingBottom: padding,\n    paddingLeft: padding,\n  };\n\n  const htmlStr = useMemo(\n    () =>\n      processHtml(\n        `<pre aria-hidden=true><code ${language && value ? `class=\"language-${language}\"` : ''} >${htmlEncode(\n          String(value || placeholder || ''),\n        )}</code><br /></pre>`,\n        rehypePlugins,\n      ),\n    [value, placeholder, language, rehypePlugins],\n  );\n  const preView = useMemo(\n    () => (\n      <div\n        style={{ ...styles.editor, ...contentStyle, minHeight }}\n        className={`${prefixCls}-preview ${language ? `language-${language}` : ''}`}\n        dangerouslySetInnerHTML={{\n          __html: htmlStr,\n        }}\n      />\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [prefixCls, language, htmlStr],\n  );\n\n  return (\n    <div style={{ ...styles.container, ...style }} className={`${prefixCls} ${className || ''}`}>\n      <textarea\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        spellCheck=\"false\"\n        autoCapitalize=\"off\"\n        {...other}\n        placeholder={placeholder}\n        onKeyDown={(evn) => {\n          if (!other.onKeyDown || other.onKeyDown(evn) !== false) {\n            shortcuts(evn);\n          }\n        }}\n        style={{\n          ...styles.editor,\n          ...styles.textarea,\n          ...contentStyle,\n          minHeight,\n          ...(placeholder && !value ? { WebkitTextFillColor: 'inherit' } : {}),\n        }}\n        ref={textRef}\n        onChange={(evn) => {\n          setValue(evn.target.value);\n          onChange && onChange(evn);\n        }}\n        className={`${prefixCls}-text`}\n        value={value}\n      />\n      {preView}\n    </div>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}